API DAY 06 






==========================================

-- HOW TO READ DATA FROM JSON FILE TO MAKE VERIFICATION 

===========================================
- CONTAINS --> NOT SUGGESTED - DOES NOT MAKE GUARANTEE 

	        	{
	        		"id":4,
	        		"name":"Fidole",
	        		"phone":12346789

	        	}

	        	response.body().asString() --> String	
	        	response.body().asString().contains("Fidole") --> it will return boolean 

	This is not the effiecient way 
	

==========================================
	GPATH --> It is the syntax to get specific data from JSON 

		- GPath is a path expression language integrated into Groovy which allows parts of nested structured data to be identified.

		- Link -->http://docs.groovy-lang.org/latest/html/documentation/#_gpath

==========================================

    1.Path method 

	
	response.path("pathOFKeyFromResponse") ---> it will return value that is stored in related key
	
	Response response=get("/spartans");

				{
	        		"id":4,
	        		"name":"Fidole",
	        		"gender":"Male"
	        		"phone":12346789

	        	}

	response.path("id") ---> 4
	response.path("name") ---> Fidole
	response.path("gender") --> Male
	response.path("phone") --> 12346789	 

==========================================

    2.JsonPath method 

    	-- there is no difference about using Gpath syntax with path(method)
    	-- It is similar way with path() method to navigate into JSON response 
    	-- It has couple of methods to make it readable and return required type of data 

    			- getString
    			- getInt
    			- getLong
    			- getList
    			- getObject
    			.....
    			...
    			..


    ====== items.findAll {it.region_id==2}.country_name

    	items ---> it is key for the array that we are getting from response 

    		.findAll --> it is method tthat comes from Gpath to find all matching data 

    			{it.region_id==2} --> this is the condition that we are looking for to filter 

    			  it --> iterator--> it will check each eleemnt from the array 

    			  	after filter array of Json Object will prepare List of data based on your return type 


    	Ex --> 
    			List<String> countryNamesWithID2 = jp.getList("items.findAll {it.region_id==2}.country_name");

    				 sout(countryNamesWithID2)---> [Argentina, Brazil, Canada, Mexico, United States of America]



    -- How to create JSONPATH Object

     1--
     	Response response=get("/spartans");

     	JsonPath jsonpath=response.jsonPath();
   
      2--

		JsonPath jsonpath= get("/spartans").jsonPath();

    --------

====================================    

      
    3.HamCrest Matchers

    	- It is assertion library to increase readability and to make assertion after then() section of API Request 
    	- Do we need to any dependcy ? 
    		- No, it comes with Rest Assured 

    	- We will use Hamcrest Matchers method after then section	

    	- In any framework if you wanna implement your testing with hamcrest you can add individually related dependecy to work on it 	


    		........
    		then()
    				.statusCode(200)
    				.contentType("application/json")
    				.header("Date",notNullValue())
    				.body("id",is(15),
    					 "name",is("Meta"))
    				.body("gender","Female")
    				.body("phone",123456743);

    	Link --> http://hamcrest.org/JavaHamcrest/javadoc/2.2/org/hamcrest/Matchers.html			


====================================    


    4.Deserilization ----> Converting JSON to JAVA Collections (List,Map etc .....)

    	-- MAP --
    		{
                "id": 15,
                "name": "Meta",
                "gender": "Female",
                "phone": 1938695106
            }


            NOTE --> We need to add dependency for deserilization to convert JSON to JAVA Collections/POJO 

            		-- JACKSON Databind Library

           a -> Response

           		Map<String,Object> spartanMap= response.as(Map.class);	 
           			
           			spartanMap.get("id")


           b -> JsonPath 

           		JsonPath jsonPath=response.jsonPath();
           		Map<String,Object> spartanMap=jsonPath.getMap("")

           			spartanMap.get("id")

           		Should I use alwasy "" as a path to store data ? No it depends your json structure
					{
					spartan :{
							    "id": 15,
							    "name": "Meta",
							    "gender": "Female",
							    "phone": 1938695106
							}
					}	

					Map<String,Object> spartanMap=jsonPath.getMap("spartan")	


				-- response.as() --> method will do deserilization 
				-- jsonPath.getMap()/getList()/getObject will do deserilization	

    	-- LIST  OF MAP --


    		[
	          {
	              "id": 206,
	              "name": "Mike",
	              "gender": "Male",
	              "phone": 2027777777
	          },
	          {
	              "id": 209,
	              "name": "Mike",
	              "gender": "Male",
	              "phone": 3435657786
	          }
      		]

      		a -> Response

           		List<Map<String,Object>> listOfSpartan= response.as(List.class);	 
           		
           		listOfSpartan.get(0).get("id")

           		

           b -> JsonPath 

           		JsonPath jsonPath=response.jsonPath();
           		
           		List<Map<String,Object>> listOfSpartan=jsonPath.getList("")	

           		listOfSpartan.get(0).get("id")	



           	NOTE --> We always need to have list and then pick from list which data we need  right ?
           	
           		We are doing practice for all conditions.But if you waanna verify only one spartan use path to store this spartan as a Map and make your verfification 
           		If you need to check all spartans inforamtion deserilize them into List of Map to assert it 
	

			NOTE --> Can you explain difference between 

			response.path () ---> will return T Generics.That is why we can cast into Map directly 

			response.as() --> Does deserilization to convert your response JSon to  JavaCollection 

			for deserilization we are gonna use response.as() 



NOTE ---> The key point is that while we are storing data into Java collection , we need to choose correct structure 
           
 			JsonPath jp= get("/regions").jsonPath()	

 			List<Map<String,Object>> listOfRegions = jp.getList("");

 				- it will throw ClassCastException due to incompatible type to store in List of Map 


 			List<Map<String,Object>> listOfRegions = jp.getList("items");

	 			- items will point which data we are gonna get as a List of Map to store in compatible Java Collection 
	 			  Then it will work




    5.Deserilization ----> Converting JSON to POJO (Spartan,Employee etc .....)


        What is POJO ? 
        	- It is Plain Old Java Object 
        	- It is regular Java to store data in it 
        	- Rectangle,Shape,Animal etc Custom Classes
        	- We are gonna do deserilization from JSON to POJO 


        	[
	        	{
		              "id": 206,
		              "name": "Mike",
		              "gender": "Male",
		              "phone": 2027777777,
		              "batchNumber":"01"
		        
		        },
		        {
		              "id": 206,
		              "name": "Mike",
		              "gender": "Male",
		              "phone": 2027777777,
		              "batchNumber":"01"
		        
		        }
	      	]

	       public class Spartan {


	       		private int id;
	       		private String name;
	       		private String gender;
	       		private long phone;
	       		private String batchNumber;

	       		// GETTER + SETTER 

	       		// TOSTRING 

	       		// CONSTR - It is optional 


	       }

	       RESPONSE 

	       	Spartan spartan=response.as(Spartan.class);

	        response.as(Spartan.class)  --> It will not work to get spesific part of response to do deserilizaton JSON to POJO 
	        			                    That is why jsonPath more powerful than response in terms of deserliziation


	      JSONPATH 
	      	Spartan spartan=jsonpath.getObject("",Spartan.class); 	

	      	"" --> means get everything that you get as response 

	       how to read data from POJO 
		       spartan.getId();
		       spartan.getName();
		       spartan.getGender();
		       ....
		       ...
		       ..
		       .

	       - How this will happen ? 

		       	 - When we use response.as / jsonpath.getObject method we need to tell which class we are gonna use to store the response Jackson Object Mapper / Databind library will deserilization behind the  scene and put all data into Spartan class 
		       	 for related field 

		       	 - JACKSON library will use setters to set values from response into POJO class related field 

		       	 - As a default response keys needs to match with POJO Class varaibles 

		       	 - Instead of trying to find path for response we are gonna deserilize it to POJO class with the help of this we will reuse it 

             - What if response data gets updated or any info deleted ?   IQ )

             	- We are gonna update POJO class if we get any change from developers / response 	



---- JACKSON ----> @JSONPROPERTY  --------
Q - in response "batch number" with space but we create 
    batchNumber variable without space it will know which one will point ? 

    - We are gonna use @JsonProperty("region_id") to inform Jackson
    - it will get region_id from response and try to map into POJO class 
    - Then it will see JsonPropert("region_id") to put data into related field 

    	 @JsonProperty("region_id")
    	 private int regionId; 


---- JACKSON ---> @JsonIgnoreProperties (ignoreUnknown=true)  --------

	- Default value is ignoreUnknown = false
	- It means while Jackson doing deserilization it will not ignore ny field and try to map data to related POJO field
	- If we dont have related field in POJO it will throw exception
			com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "region_id" (class com.cydeo.pojo.Region), not marked as ignorable (3 known properties: "links", "regionId", "regionName"])

	- To prevent we need to say @JsonIgnoreProperties (ignoreUnknown=true) over related class
	- In that case Jackson will ignore all undefined fields 
 
----- LOMBOK --------- 

 - it is a library to create boiler plates code (getter,setter,constr,toString etc)
 - It wil generate boiler plate  codes when we need automatically without typing getter and setters manually

 - @Data includes @ToString,@Getter,@Setter ... also more  


-------------------------


